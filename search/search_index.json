{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"prefect-vault Welcome! Prefect blocks for HashiCorp Vault. Getting Started Python setup Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation . Installation Install prefect-vault with pip : pip install prefect-vault Create and use VaultSecret block with token authentication from prefect import flow from prefect_vault import VaultSecret , VaultToken @flow def use_vault_secret (): vault_secret = VaultSecret ( vault_auth = VaultToken ( vault_url = 'http://myvault:8200' , token = 'my_secret_token' , ), ) secret_value = vault_secret . get_secret ( 'path/to/my/secret' )[ 'secret_key' ] use_vault_secret () Create and use VaultSecret block with approle authentication from prefect import flow from prefect_vault import VaultAppRole , VaultSecret @flow def use_vault_secret (): vault_secret = VaultSecret ( vault_auth = VaultAppRole ( vault_url = 'http://myvault:8200' , role_id = 'my_role_id' , secret_id = 'my_secret_id' , ), ) secret_value = vault_secret . get_secret ( 'path/to/my/secret' )[ 'secret_key' ] use_vault_secret () Resources If you encounter any bugs while using prefect-vault , feel free to open an issue in the prefect-vault repository. If you have any questions or issues while using prefect-vault , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Development If you'd like to install a version of prefect-vault for development, clone the repository and perform an editable install with pip : git clone https://github.com/pbchekin/prefect-vault.git cd prefect-vault/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Home"},{"location":"#prefect-vault","text":"","title":"prefect-vault"},{"location":"#welcome","text":"Prefect blocks for HashiCorp Vault.","title":"Welcome!"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#python-setup","text":"Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation .","title":"Python setup"},{"location":"#installation","text":"Install prefect-vault with pip : pip install prefect-vault","title":"Installation"},{"location":"#create-and-use-vaultsecret-block-with-token-authentication","text":"from prefect import flow from prefect_vault import VaultSecret , VaultToken @flow def use_vault_secret (): vault_secret = VaultSecret ( vault_auth = VaultToken ( vault_url = 'http://myvault:8200' , token = 'my_secret_token' , ), ) secret_value = vault_secret . get_secret ( 'path/to/my/secret' )[ 'secret_key' ] use_vault_secret ()","title":"Create and use VaultSecret block with token authentication"},{"location":"#create-and-use-vaultsecret-block-with-approle-authentication","text":"from prefect import flow from prefect_vault import VaultAppRole , VaultSecret @flow def use_vault_secret (): vault_secret = VaultSecret ( vault_auth = VaultAppRole ( vault_url = 'http://myvault:8200' , role_id = 'my_role_id' , secret_id = 'my_secret_id' , ), ) secret_value = vault_secret . get_secret ( 'path/to/my/secret' )[ 'secret_key' ] use_vault_secret ()","title":"Create and use VaultSecret block with approle authentication"},{"location":"#resources","text":"If you encounter any bugs while using prefect-vault , feel free to open an issue in the prefect-vault repository. If you have any questions or issues while using prefect-vault , you can find help in either the Prefect Discourse forum or the Prefect Slack community .","title":"Resources"},{"location":"#development","text":"If you'd like to install a version of prefect-vault for development, clone the repository and perform an editable install with pip : git clone https://github.com/pbchekin/prefect-vault.git cd prefect-vault/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Development"},{"location":"auth/","text":"prefect_vault.auth HashiCorp Vault authentication blocks. VaultAppRole \"HashiCorp Vault token. See https://www.vaultproject.io/docs/auth/approle. Source code in prefect_vault/auth.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 class VaultAppRole ( VaultAuth ): \"\"\" \"HashiCorp Vault token. See https://www.vaultproject.io/docs/auth/approle. \"\"\" _block_type_name = \"HashiCorp Vault AppRole\" role_id : str secret_id : SecretStr mount_point : str = \"approle\" def vault_client ( self ) -> hvac . Client : \"\"\"Returns Vault client.\"\"\" client = hvac . Client ( url = self . vault_url ) client . auth . approle . login ( role_id = self . role_id , secret_id = self . secret_id . get_secret_value (), mount_point = self . mount_point , ) return client vault_client Returns Vault client. Source code in prefect_vault/auth.py 53 54 55 56 57 58 59 60 61 def vault_client ( self ) -> hvac . Client : \"\"\"Returns Vault client.\"\"\" client = hvac . Client ( url = self . vault_url ) client . auth . approle . login ( role_id = self . role_id , secret_id = self . secret_id . get_secret_value (), mount_point = self . mount_point , ) return client VaultAuth Base class for HashiCorp Vault authentication methods. See https://www.vaultproject.io/docs/auth. Source code in prefect_vault/auth.py 11 12 13 14 15 16 17 18 19 20 21 22 23 class VaultAuth ( Block ): \"\"\"Base class for HashiCorp Vault authentication methods. See https://www.vaultproject.io/docs/auth. \"\"\" _logo_url = \"https://raw.githubusercontent.com/hashicorp/vault/main/ui/public/vault-logo.svg\" # noqa vault_url : str @abstractmethod def vault_client ( self ) -> hvac . Client : \"\"\"Returns Vault client.\"\"\" vault_client abstractmethod Returns Vault client. Source code in prefect_vault/auth.py 21 22 23 @abstractmethod def vault_client ( self ) -> hvac . Client : \"\"\"Returns Vault client.\"\"\" VaultToken \"HashiCorp Vault token. See https://www.vaultproject.io/docs/auth/token. Source code in prefect_vault/auth.py 26 27 28 29 30 31 32 33 34 35 36 37 38 class VaultToken ( VaultAuth ): \"\"\" \"HashiCorp Vault token. See https://www.vaultproject.io/docs/auth/token. \"\"\" _block_type_name = \"HashiCorp Vault Token\" token : SecretStr def vault_client ( self ) -> hvac . Client : \"\"\"Returns Vault client.\"\"\" return hvac . Client ( url = self . vault_url , token = self . token . get_secret_value ()) vault_client Returns Vault client. Source code in prefect_vault/auth.py 36 37 38 def vault_client ( self ) -> hvac . Client : \"\"\"Returns Vault client.\"\"\" return hvac . Client ( url = self . vault_url , token = self . token . get_secret_value ())","title":"Auth"},{"location":"auth/#prefect_vault.auth","text":"HashiCorp Vault authentication blocks.","title":"auth"},{"location":"auth/#prefect_vault.auth.VaultAppRole","text":"\"HashiCorp Vault token. See https://www.vaultproject.io/docs/auth/approle. Source code in prefect_vault/auth.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 class VaultAppRole ( VaultAuth ): \"\"\" \"HashiCorp Vault token. See https://www.vaultproject.io/docs/auth/approle. \"\"\" _block_type_name = \"HashiCorp Vault AppRole\" role_id : str secret_id : SecretStr mount_point : str = \"approle\" def vault_client ( self ) -> hvac . Client : \"\"\"Returns Vault client.\"\"\" client = hvac . Client ( url = self . vault_url ) client . auth . approle . login ( role_id = self . role_id , secret_id = self . secret_id . get_secret_value (), mount_point = self . mount_point , ) return client","title":"VaultAppRole"},{"location":"auth/#prefect_vault.auth.VaultAppRole.vault_client","text":"Returns Vault client. Source code in prefect_vault/auth.py 53 54 55 56 57 58 59 60 61 def vault_client ( self ) -> hvac . Client : \"\"\"Returns Vault client.\"\"\" client = hvac . Client ( url = self . vault_url ) client . auth . approle . login ( role_id = self . role_id , secret_id = self . secret_id . get_secret_value (), mount_point = self . mount_point , ) return client","title":"vault_client()"},{"location":"auth/#prefect_vault.auth.VaultAuth","text":"Base class for HashiCorp Vault authentication methods. See https://www.vaultproject.io/docs/auth. Source code in prefect_vault/auth.py 11 12 13 14 15 16 17 18 19 20 21 22 23 class VaultAuth ( Block ): \"\"\"Base class for HashiCorp Vault authentication methods. See https://www.vaultproject.io/docs/auth. \"\"\" _logo_url = \"https://raw.githubusercontent.com/hashicorp/vault/main/ui/public/vault-logo.svg\" # noqa vault_url : str @abstractmethod def vault_client ( self ) -> hvac . Client : \"\"\"Returns Vault client.\"\"\"","title":"VaultAuth"},{"location":"auth/#prefect_vault.auth.VaultAuth.vault_client","text":"Returns Vault client. Source code in prefect_vault/auth.py 21 22 23 @abstractmethod def vault_client ( self ) -> hvac . Client : \"\"\"Returns Vault client.\"\"\"","title":"vault_client()"},{"location":"auth/#prefect_vault.auth.VaultToken","text":"\"HashiCorp Vault token. See https://www.vaultproject.io/docs/auth/token. Source code in prefect_vault/auth.py 26 27 28 29 30 31 32 33 34 35 36 37 38 class VaultToken ( VaultAuth ): \"\"\" \"HashiCorp Vault token. See https://www.vaultproject.io/docs/auth/token. \"\"\" _block_type_name = \"HashiCorp Vault Token\" token : SecretStr def vault_client ( self ) -> hvac . Client : \"\"\"Returns Vault client.\"\"\" return hvac . Client ( url = self . vault_url , token = self . token . get_secret_value ())","title":"VaultToken"},{"location":"auth/#prefect_vault.auth.VaultToken.vault_client","text":"Returns Vault client. Source code in prefect_vault/auth.py 36 37 38 def vault_client ( self ) -> hvac . Client : \"\"\"Returns Vault client.\"\"\" return hvac . Client ( url = self . vault_url , token = self . token . get_secret_value ())","title":"vault_client()"},{"location":"secret/","text":"prefect_vault.secret HashiCorp Vault secret block. VaultSecret HashiCorp secret. Examples: vault_secret = VaultSecret( vault_auth=VaultToken( vault_url='...', token='...', ), ) vault_secret.put_secret('secret_name', {'secret_key': 'secret_value'}) secret_data = vault_secret.get_secret('secret_name') Source code in prefect_vault/secret.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 class VaultSecret ( Block ): \"\"\"HashiCorp secret. Examples: vault_secret = VaultSecret( vault_auth=VaultToken( vault_url='...', token='...', ), ) vault_secret.put_secret('secret_name', {'secret_key': 'secret_value'}) secret_data = vault_secret.get_secret('secret_name') \"\"\" vault_auth : VaultAuth def get_secret ( self , path : str , mount_point = \"secret\" ) -> Optional [ Dict [ str , Any ]]: \"\"\"Returns Vault secret. Args: path: the path of the Vault secret, not including the mount point. mount_point: the secrets engine mount point, default is 'secret'. Returns: a dictionary with secret data. \"\"\" vault_client = self . vault_auth . vault_client () return ( vault_client . secrets . kv . v2 . read_secret ( path = path , mount_point = mount_point ) . get ( \"data\" , {}) . get ( \"data\" ) ) def put_secret ( self , path : str , secret : Dict [ str , Any ], mount_point = \"secret\" ): \"\"\"Creates or updates Vault secret. Args: path: the path of the Vault secret, not including the mount point. secret: a dictionary with secret data. mount_point: the secrets' engine mount point, default is 'secret'. \"\"\" vault_client = self . vault_auth . vault_client () vault_client . secrets . kv . v2 . create_or_update_secret ( path = path , secret = secret , mount_point = mount_point ) get_secret Returns Vault secret. Parameters: Name Type Description Default path str the path of the Vault secret, not including the mount point. required mount_point the secrets engine mount point, default is 'secret'. 'secret' Source code in prefect_vault/secret.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 def get_secret ( self , path : str , mount_point = \"secret\" ) -> Optional [ Dict [ str , Any ]]: \"\"\"Returns Vault secret. Args: path: the path of the Vault secret, not including the mount point. mount_point: the secrets engine mount point, default is 'secret'. Returns: a dictionary with secret data. \"\"\" vault_client = self . vault_auth . vault_client () return ( vault_client . secrets . kv . v2 . read_secret ( path = path , mount_point = mount_point ) . get ( \"data\" , {}) . get ( \"data\" ) ) put_secret Creates or updates Vault secret. Parameters: Name Type Description Default path str the path of the Vault secret, not including the mount point. required secret Dict [ str , Any ] a dictionary with secret data. required mount_point the secrets' engine mount point, default is 'secret'. 'secret' Source code in prefect_vault/secret.py 45 46 47 48 49 50 51 52 53 54 55 56 def put_secret ( self , path : str , secret : Dict [ str , Any ], mount_point = \"secret\" ): \"\"\"Creates or updates Vault secret. Args: path: the path of the Vault secret, not including the mount point. secret: a dictionary with secret data. mount_point: the secrets' engine mount point, default is 'secret'. \"\"\" vault_client = self . vault_auth . vault_client () vault_client . secrets . kv . v2 . create_or_update_secret ( path = path , secret = secret , mount_point = mount_point )","title":"Secret"},{"location":"secret/#prefect_vault.secret","text":"HashiCorp Vault secret block.","title":"secret"},{"location":"secret/#prefect_vault.secret.VaultSecret","text":"HashiCorp secret. Examples: vault_secret = VaultSecret( vault_auth=VaultToken( vault_url='...', token='...', ), ) vault_secret.put_secret('secret_name', {'secret_key': 'secret_value'}) secret_data = vault_secret.get_secret('secret_name') Source code in prefect_vault/secret.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 class VaultSecret ( Block ): \"\"\"HashiCorp secret. Examples: vault_secret = VaultSecret( vault_auth=VaultToken( vault_url='...', token='...', ), ) vault_secret.put_secret('secret_name', {'secret_key': 'secret_value'}) secret_data = vault_secret.get_secret('secret_name') \"\"\" vault_auth : VaultAuth def get_secret ( self , path : str , mount_point = \"secret\" ) -> Optional [ Dict [ str , Any ]]: \"\"\"Returns Vault secret. Args: path: the path of the Vault secret, not including the mount point. mount_point: the secrets engine mount point, default is 'secret'. Returns: a dictionary with secret data. \"\"\" vault_client = self . vault_auth . vault_client () return ( vault_client . secrets . kv . v2 . read_secret ( path = path , mount_point = mount_point ) . get ( \"data\" , {}) . get ( \"data\" ) ) def put_secret ( self , path : str , secret : Dict [ str , Any ], mount_point = \"secret\" ): \"\"\"Creates or updates Vault secret. Args: path: the path of the Vault secret, not including the mount point. secret: a dictionary with secret data. mount_point: the secrets' engine mount point, default is 'secret'. \"\"\" vault_client = self . vault_auth . vault_client () vault_client . secrets . kv . v2 . create_or_update_secret ( path = path , secret = secret , mount_point = mount_point )","title":"VaultSecret"},{"location":"secret/#prefect_vault.secret.VaultSecret.get_secret","text":"Returns Vault secret. Parameters: Name Type Description Default path str the path of the Vault secret, not including the mount point. required mount_point the secrets engine mount point, default is 'secret'. 'secret' Source code in prefect_vault/secret.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 def get_secret ( self , path : str , mount_point = \"secret\" ) -> Optional [ Dict [ str , Any ]]: \"\"\"Returns Vault secret. Args: path: the path of the Vault secret, not including the mount point. mount_point: the secrets engine mount point, default is 'secret'. Returns: a dictionary with secret data. \"\"\" vault_client = self . vault_auth . vault_client () return ( vault_client . secrets . kv . v2 . read_secret ( path = path , mount_point = mount_point ) . get ( \"data\" , {}) . get ( \"data\" ) )","title":"get_secret()"},{"location":"secret/#prefect_vault.secret.VaultSecret.put_secret","text":"Creates or updates Vault secret. Parameters: Name Type Description Default path str the path of the Vault secret, not including the mount point. required secret Dict [ str , Any ] a dictionary with secret data. required mount_point the secrets' engine mount point, default is 'secret'. 'secret' Source code in prefect_vault/secret.py 45 46 47 48 49 50 51 52 53 54 55 56 def put_secret ( self , path : str , secret : Dict [ str , Any ], mount_point = \"secret\" ): \"\"\"Creates or updates Vault secret. Args: path: the path of the Vault secret, not including the mount point. secret: a dictionary with secret data. mount_point: the secrets' engine mount point, default is 'secret'. \"\"\" vault_client = self . vault_auth . vault_client () vault_client . secrets . kv . v2 . create_or_update_secret ( path = path , secret = secret , mount_point = mount_point )","title":"put_secret()"}]}