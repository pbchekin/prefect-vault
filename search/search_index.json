{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"prefect-vault","text":""},{"location":"#welcome","title":"Welcome!","text":"<p>Prefect blocks for HashiCorp Vault.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#python-setup","title":"Python setup","text":"<p>Requires an installation of Python 3.7+.</p> <p>We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv.</p> <p>These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install <code>prefect-vault</code> with <code>pip</code>:</p> <pre><code>pip install prefect-vault\n</code></pre>"},{"location":"#create-vaultsecret-block-with-token-authentication","title":"Create VaultSecret block with token authentication","text":"<pre><code>from prefect_vault import VaultSecret, VaultToken\n\nvault_secret = VaultSecret(\n    vault_auth=VaultToken(\n        vault_url='http://myvault:8200',\n        token='my_secret_token',\n    ),\n)\n\nawait vault_secret.save('my-vault-secret')\n</code></pre>"},{"location":"#create-vaultsecret-block-with-approle-authentication","title":"Create VaultSecret block with approle authentication","text":"<pre><code>from prefect_vault import VaultAppRole, VaultSecret \n\nvault_secret = VaultSecret(\n    vault_auth=VaultAppRole(\n        vault_url='http://myvault:8200',\n        role_id='my_role_id',\n        secret_id='my_secret_id',\n    ),\n)\n\nawait vault_secret.save('my-vault-secret')\n</code></pre>"},{"location":"#use-vaultsecret-in-prefect-flow","title":"Use VaultSecret in Prefect flow","text":"<pre><code>from prefect import flow\nfrom prefect_vault import VaultSecret\n\n\n@flow\nasync def use_vault_secret():\n    vault_secret = await VaultSecret.load('my-vault-secret')\n    secret_value = vault_secret.get_secret('path/to/my/secret')['secret_key']\n</code></pre>"},{"location":"#resources","title":"Resources","text":"<p>If you encounter any bugs while using <code>prefect-vault</code>, feel free to open an issue in the prefect-vault repository.</p> <p>If you have any questions or issues while using <code>prefect-vault</code>, you can find help in either the Prefect Discourse forum or the Prefect Slack community.</p>"},{"location":"#development","title":"Development","text":"<p>If you'd like to install a version of <code>prefect-vault</code> for development, clone the repository and perform an editable install with <code>pip</code>:</p> <pre><code>git clone https://github.com/pbchekin/prefect-vault.git\n\ncd prefect-vault/\n\npip install -e \".[dev]\"\n\n# Install linting pre-commit hooks\npre-commit install\n</code></pre>"},{"location":"auth/","title":"Auth","text":"<p>HashiCorp Vault authentication blocks.</p>"},{"location":"auth/#prefect_vault.auth.VaultAppRole","title":"<code>VaultAppRole</code>","text":"<p>             Bases: <code>VaultAuth</code></p> <p>HashiCorp Vault token.</p> <p>See https://www.vaultproject.io/docs/auth/approle.</p> Source code in <code>prefect_vault/auth.py</code> <pre><code>class VaultAppRole(VaultAuth):\n    \"\"\"HashiCorp Vault token.\n\n    See https://www.vaultproject.io/docs/auth/approle.\n    \"\"\"\n\n    _block_type_name = \"HashiCorp Vault AppRole\"\n\n    role_id: str\n    secret_id: SecretStr\n    mount_point: str = \"approle\"\n\n    def vault_client(self) -&gt; hvac.Client:\n        \"\"\"Returns Vault client.\"\"\"\n        client = hvac.Client(url=self.vault_url)\n        client.auth.approle.login(\n            role_id=self.role_id,\n            secret_id=self.secret_id.get_secret_value(),\n            mount_point=self.mount_point,\n        )\n        return client\n</code></pre>"},{"location":"auth/#prefect_vault.auth.VaultAppRole.vault_client","title":"<code>vault_client()</code>","text":"<p>Returns Vault client.</p> Source code in <code>prefect_vault/auth.py</code> <pre><code>def vault_client(self) -&gt; hvac.Client:\n    \"\"\"Returns Vault client.\"\"\"\n    client = hvac.Client(url=self.vault_url)\n    client.auth.approle.login(\n        role_id=self.role_id,\n        secret_id=self.secret_id.get_secret_value(),\n        mount_point=self.mount_point,\n    )\n    return client\n</code></pre>"},{"location":"auth/#prefect_vault.auth.VaultAuth","title":"<code>VaultAuth</code>","text":"<p>             Bases: <code>Block</code></p> <p>Base class for HashiCorp Vault authentication methods.</p> <p>See https://www.vaultproject.io/docs/auth.</p> Source code in <code>prefect_vault/auth.py</code> <pre><code>class VaultAuth(Block):\n    \"\"\"Base class for HashiCorp Vault authentication methods.\n\n    See https://www.vaultproject.io/docs/auth.\n    \"\"\"\n\n    _logo_url = \"https://raw.githubusercontent.com/hashicorp/vault/main/ui/public/vault-logo.svg\"  # noqa\n\n    vault_url: str\n\n    @abstractmethod\n    def vault_client(self) -&gt; hvac.Client:\n        \"\"\"Returns Vault client.\"\"\"\n</code></pre>"},{"location":"auth/#prefect_vault.auth.VaultAuth.vault_client","title":"<code>vault_client()</code>  <code>abstractmethod</code>","text":"<p>Returns Vault client.</p> Source code in <code>prefect_vault/auth.py</code> <pre><code>@abstractmethod\ndef vault_client(self) -&gt; hvac.Client:\n    \"\"\"Returns Vault client.\"\"\"\n</code></pre>"},{"location":"auth/#prefect_vault.auth.VaultToken","title":"<code>VaultToken</code>","text":"<p>             Bases: <code>VaultAuth</code></p> <p>HashiCorp Vault token.</p> <p>See https://www.vaultproject.io/docs/auth/token.</p> Source code in <code>prefect_vault/auth.py</code> <pre><code>class VaultToken(VaultAuth):\n    \"\"\"HashiCorp Vault token.\n\n    See https://www.vaultproject.io/docs/auth/token.\n    \"\"\"\n\n    _block_type_name = \"HashiCorp Vault Token\"\n\n    token: SecretStr\n\n    def vault_client(self) -&gt; hvac.Client:\n        \"\"\"Returns Vault client.\"\"\"\n        return hvac.Client(url=self.vault_url, token=self.token.get_secret_value())\n</code></pre>"},{"location":"auth/#prefect_vault.auth.VaultToken.vault_client","title":"<code>vault_client()</code>","text":"<p>Returns Vault client.</p> Source code in <code>prefect_vault/auth.py</code> <pre><code>def vault_client(self) -&gt; hvac.Client:\n    \"\"\"Returns Vault client.\"\"\"\n    return hvac.Client(url=self.vault_url, token=self.token.get_secret_value())\n</code></pre>"},{"location":"secret/","title":"Secret","text":"<p>HashiCorp Vault secret block.</p>"},{"location":"secret/#prefect_vault.secret.VaultSecret","title":"<code>VaultSecret</code>","text":"<p>             Bases: <code>Block</code></p> <p>HashiCorp secret.</p> <p>Examples:</p> <pre><code>vault_secret = VaultSecret(\n    vault_auth=VaultToken(\n        vault_url='...',\n        token='...',\n    ),\n)\n\nvault_secret.put_secret('secret_name', {'secret_key': 'secret_value'})\nsecret_data = vault_secret.get_secret('secret_name')\n</code></pre> Source code in <code>prefect_vault/secret.py</code> <pre><code>class VaultSecret(Block):\n    \"\"\"HashiCorp secret.\n\n    Examples:\n\n        vault_secret = VaultSecret(\n            vault_auth=VaultToken(\n                vault_url='...',\n                token='...',\n            ),\n        )\n\n        vault_secret.put_secret('secret_name', {'secret_key': 'secret_value'})\n        secret_data = vault_secret.get_secret('secret_name')\n    \"\"\"\n\n    vault_auth: VaultAuth\n\n    def get_secret(self, path: str, mount_point=\"secret\") -&gt; Optional[Dict[str, Any]]:\n        \"\"\"Returns Vault secret.\n\n        Args:\n            path: the path of the Vault secret, not including the mount point.\n            mount_point: the secrets engine mount point, default is 'secret'.\n\n        Returns: a dictionary with secret data.\n        \"\"\"\n        vault_client = self.vault_auth.vault_client()\n        return (\n            vault_client.secrets.kv.v2.read_secret(path=path, mount_point=mount_point)\n            .get(\"data\", {})\n            .get(\"data\")\n        )\n\n    def put_secret(self, path: str, secret: Dict[str, Any], mount_point=\"secret\"):\n        \"\"\"Creates or updates Vault secret.\n\n        Args:\n            path: the path of the Vault secret, not including the mount point.\n            secret: a dictionary with secret data.\n            mount_point: the secrets' engine mount point, default is 'secret'.\n        \"\"\"\n        vault_client = self.vault_auth.vault_client()\n        vault_client.secrets.kv.v2.create_or_update_secret(\n            path=path, secret=secret, mount_point=mount_point\n        )\n</code></pre>"},{"location":"secret/#prefect_vault.secret.VaultSecret.get_secret","title":"<code>get_secret(path, mount_point='secret')</code>","text":"<p>Returns Vault secret.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>the path of the Vault secret, not including the mount point.</p> required <code>mount_point</code> <p>the secrets engine mount point, default is 'secret'.</p> <code>'secret'</code> Source code in <code>prefect_vault/secret.py</code> <pre><code>def get_secret(self, path: str, mount_point=\"secret\") -&gt; Optional[Dict[str, Any]]:\n    \"\"\"Returns Vault secret.\n\n    Args:\n        path: the path of the Vault secret, not including the mount point.\n        mount_point: the secrets engine mount point, default is 'secret'.\n\n    Returns: a dictionary with secret data.\n    \"\"\"\n    vault_client = self.vault_auth.vault_client()\n    return (\n        vault_client.secrets.kv.v2.read_secret(path=path, mount_point=mount_point)\n        .get(\"data\", {})\n        .get(\"data\")\n    )\n</code></pre>"},{"location":"secret/#prefect_vault.secret.VaultSecret.put_secret","title":"<code>put_secret(path, secret, mount_point='secret')</code>","text":"<p>Creates or updates Vault secret.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>the path of the Vault secret, not including the mount point.</p> required <code>secret</code> <code>Dict[str, Any]</code> <p>a dictionary with secret data.</p> required <code>mount_point</code> <p>the secrets' engine mount point, default is 'secret'.</p> <code>'secret'</code> Source code in <code>prefect_vault/secret.py</code> <pre><code>def put_secret(self, path: str, secret: Dict[str, Any], mount_point=\"secret\"):\n    \"\"\"Creates or updates Vault secret.\n\n    Args:\n        path: the path of the Vault secret, not including the mount point.\n        secret: a dictionary with secret data.\n        mount_point: the secrets' engine mount point, default is 'secret'.\n    \"\"\"\n    vault_client = self.vault_auth.vault_client()\n    vault_client.secrets.kv.v2.create_or_update_secret(\n        path=path, secret=secret, mount_point=mount_point\n    )\n</code></pre>"}]}